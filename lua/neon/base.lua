-- lua/neon/base.lua

local utils = require("neon.utils")
local c = require("neon.colors")

local M = {}

function M.setup()
	local highlights = {
		Normal = { fg = c.fg_main, bg = c.bg },
		NormalNC = { bg = c.bg },
		NormalFloat = { bg = c.bg, fg = c.fg_main },
		FloatBorder = { fg = c.fg_comment, bg = c.bg },

		Comment = { fg = c.fg_comment, italic = true },
		Constant = { fg = c.constant },
		String = { fg = c.string },
		Character = { fg = c.string },
		Number = { fg = c.number },
		Boolean = { fg = c.constant },
		Float = { fg = c.number },

		Identifier = { fg = c.variable },
		Function = { fg = c.func },

		Statement = { fg = c.keyword },
		Keyword = { fg = c.keyword },
		Operator = { fg = c.operator },
		PreProc = { fg = c.keyword },
		Define = { fg = c.keyword },
		Include = { fg = c.keyword },
		Macro = { fg = c.keyword },
		Conditional = { fg = c.keyword },
		Repeat = { fg = c.keyword },
		Label = { fg = c.keyword },

		Type = { fg = c.func },
		StorageClass = { fg = c.keyword },
		Structure = { fg = c.keyword },
		Typedef = { fg = c.func },

		Special = { fg = c.yellow },
		SpecialChar = { fg = c.error },
		Tag = { fg = c.keyword },
		Delimiter = { fg = c.fg_sub },
		SpecialComment = { fg = c.fg_comment },

		Todo = { fg = c.bg, bg = c.warning, bold = true },
		Error = { fg = c.bg, bg = c.error },
		WarningMsg = { fg = c.warning },

		Title = { fg = c.func, bold = true },

		DiffAdd = { bg = "#003300", fg = c.added },
		DiffDelete = { bg = "#330000", fg = c.deleted },
		DiffChange = { bg = "#333300", fg = c.warning },
		DiffText = { bg = "#444400", fg = c.fg_main, bold = true },

		Cursor = { fg = c.bg, bg = c.cursor_fg },
		CursorLine = { bg = c.cursor_line },
		CursorColumn = { bg = c.cursor_line },
		ColorColumn = { bg = c.bg },

		Visual = { bg = c.selection },
		VisualNOS = { bg = c.selection },

		LineNr = { fg = c.fg_sub, bg = c.bg },
		CursorLineNr = { fg = c.func, bg = c.cursor_line, bold = true },
		SignColumn = { bg = c.bg },
		Folded = { fg = c.fg_comment, bg = c.bg },
		FoldColumn = { fg = c.fg_comment, bg = c.bg },

		StatusLine = { fg = c.fg_main, bg = "#333333", bold = true },
		StatusLineNC = { fg = c.fg_comment, bg = "#333333" },
		WinBar = { fg = c.fg_main, bg = c.bg },
		WinBarNC = { fg = c.fg_comment, bg = c.bg },
		VertSplit = { fg = c.fg_sub, bg = c.fg_sub },

		Search = { bg = c.warning, fg = c.bg },
		IncSearch = { bg = c.operator, fg = c.bg },

		DiagnosticError = { fg = c.error },
		DiagnosticWarn = { fg = c.warning },
		DiagnosticInfo = { fg = c.info },
		DiagnosticHint = { fg = c.debug },
		DiagnosticOk = { fg = c.added },

		DiagnosticSignError = { fg = c.error },
		DiagnosticSignWarn = { fg = c.warning },
		DiagnosticSignInfo = { fg = c.info },
		DiagnosticSignHint = { fg = c.debug },
		DiagnosticSignOk = { fg = c.added },

		DiagnosticUnderlineError = { underline = true, sp = c.error },
		DiagnosticUnderlineWarn = { underline = true, sp = c.warning },
		DiagnosticUnderlineInfo = { underline = true, sp = c.info },
		DiagnosticUnderlineHint = { underline = true, sp = c.debug },

		LspReferenceRead = { bg = "#444455" },
		LspReferenceText = { bg = "#444455" },
		LspReferenceWrite = { bg = "#554455" },

		-- Treesitter
		["@comment"] = { fg = c.fg_comment, italic = true },
		["@none"] = { bg = "NONE", fg = "NONE" },
		["@preproc"] = { fg = c.keyword },
		["@define"] = { fg = c.keyword },
		["@operator"] = { fg = c.operator },
		["@punctuation.delimiter"] = { fg = c.fg_sub },
		["@punctuation.bracket"] = { fg = c.fg_sub },
		["@punctuation.special"] = { fg = c.fg_sub },
		["@string"] = { fg = c.string },
		["@string.escape"] = { fg = c.string },
		["@string.special"] = { fg = c.string },
		["@string.regex"] = { fg = c.string },
		["@string.regexp"] = { fg = c.string },
		["@character"] = { fg = c.string },
		["@boolean"] = { fg = c.constant },
		["@number"] = { fg = c.number },
		["@float"] = { fg = c.number },
		["@function"] = { fg = c.func },
		["@function.builtin"] = { fg = c.variable },
		["@function.call"] = { fg = c.func },
		["@function.macro"] = { fg = c.keyword },
		["@function.method"] = { fg = c.func },
		["@method"] = { fg = c.func },
		["@method.call"] = { fg = c.func },
		["@constructor"] = { fg = c.func },
		["@parameter"] = { fg = c.variable },
		["@keyword"] = { fg = c.keyword },
		["@keyword.conditional"] = { fg = c.keyword },
		["@keyword.return"] = { fg = c.keyword },
		["@keyword.repeat"] = { fg = c.keyword },
		["@conditional"] = { fg = c.keyword },
		["@repeat"] = { fg = c.keyword },
		["@include"] = { fg = c.keyword },
		["@exception"] = { fg = c.keyword },
		["@type"] = { fg = c.func },
		["@type.builtin"] = { fg = c.type },
		["@type.definition"] = { fg = c.type },
		["@type.qualifier"] = { fg = c.type },
		["@storageclass"] = { fg = c.keyword },
		["@attribute"] = { fg = c.keyword },
		["@field"] = { fg = c.purple },
		["@property"] = { fg = c.purple },
		["@variable"] = { fg = c.variable },
		["@variable.builtin"] = { fg = c.keyword },
		["@variable.member"] = { fg = c.variable },
		["@variable.parameter"] = { fg = c.variable },
		["@constant"] = { fg = c.constant },
		["@constant.builtin"] = { fg = c.constant },
		["@constant.macro"] = { fg = c.keyword },
		["@markup.strong"] = { bold = true },
		["@markup.italic"] = { italic = true },
		["@markup.underline"] = { underline = true },
		["@markup.strikethrough"] = { strikethrough = true },
		["@markup.heading"] = { fg = c.func, bold = true },
		["@markup.raw"] = { fg = c.string },
		["@markup.link"] = { fg = c.func, underline = true },
		["@markup.list"] = { fg = c.purple },
		["@text.emphasis"] = { fg = c.fg_main, italic = true },
		["@text.strong"] = { fg = c.fg_main, bold = true },
		["@text.uri"] = { fg = c.func, underline = true },
		["@text.literal"] = { fg = c.string },
		["@text.reference"] = { fg = c.constant },
		["@text.todo"] = { fg = c.warning },
		["@text.note"] = { fg = c.fg_comment },
		["@text.warning"] = { fg = c.warning },
		["@text.danger"] = { fg = c.error },
		["@tag"] = { fg = c.keyword },
		["@tag.attribute"] = { fg = c.func },
		["@tag.delimiter"] = { fg = c.fg_sub },
		["@module"] = { fg = c.fg_main },
		["@namespace"] = { fg = c.keyword },
		["@symbol"] = { fg = c.variable },
		["@lsp.type.class"] = { fg = c.func },
		["@lsp.type.function"] = { fg = c.func },
		["@lsp.type.method"] = { fg = c.func },
		["@lsp.type.variable"] = { fg = c.variable },
		["@lsp.type.type"] = { fg = c.func },
		["@lsp.type.typeParameter"] = { fg = c.type },
		["@lsp.type.parameter"] = { fg = c.variable },
		["@lsp.type.property"] = { fg = c.purple },
		["@lsp.type.enum"] = { fg = c.type },
		["@lsp.type.interface"] = { fg = c.type },
		["@lsp.type.macro"] = { fg = c.keyword },
		["@lsp.type.decorator"] = { fg = c.keyword },
	}

	utils.load_highlights(highlights)
end

return M
